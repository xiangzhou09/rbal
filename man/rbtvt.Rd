% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rbtvt.R
\name{rbtvt}
\alias{rbtvt}
\title{Residual Balancing Weights for Analyzing Time-varying Treatments}
\usage{
rbtvt(exposure, xmodels, id, time, base_weights, data, max_iter = 500,
  print_level = 1, tol = 0.001)
}
\arguments{
\item{exposure}{Expression for the exposure variable.}

\item{xmodels}{A list of fitted \code{lm} or \code{glm} objects for
time-varying confounders.}

\item{id}{Expression for the unit id variable.}

\item{time}{Expression for the time variable.}

\item{base_weights}{Expression for base weights (optional).}

\item{data}{A data frame containing the variables in the model.}

\item{max_iter}{Maximum number of iterations for Newton's method.}

\item{print_level}{The level of printing: 1 (normal printing), 2 (detailed),
and 3 (very detailed).}

\item{tol}{Tolerance parameter used to determine convergence.}
}
\value{
A list containing the results.
 \item{weights}{A data frame containing id and residual balancing weights.}
 \item{constraints}{A matrix of (linearly independent) residual balancing constraints}
 \item{eb_out}{Results from calling \code{\link{eb2}} function}
 \item{call}{The matched call.}
}
\description{
\code{rbtvt} is a function that produces residual balancing weights for
estimating the marginal effects of time-varying treatments. The user supplies
a long format data frame (each row being a unit-period) and a list of
fitted model objects for time-varying confounders.
}
\examples{
# models for time-varying confounders
m1 <- lm(dem.polls ~ (d.gone.neg.l1 + dem.polls.l1 + undother.l1) * factor(week),
  data = campaign)
m2 <- lm(undother ~ (d.gone.neg.l1 + dem.polls.l1 + undother.l1) * factor(week),
  data = campaign)

# models for baseline confounders
m3 <- lm(office ~ 1, data = campaign)
m4 <- lm(deminc ~ 1, data = campaign)

xmodels <- list(m1, m2, m3, m4)

# residual balancing weights
rbtvt_fit <- rbtvt(exposure = d.gone.neg, xmodels = xmodels, id = id,
  time = week, data = campaign)
summary(rbtvt_fit$weights)
}
